Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $ReadF(db; zips)
│  │  ├─ $ProjectF
│  │  │  ├─ Name("0" -> { "$literal": true })
│  │  │  ├─ Name("src" -> "$$ROOT")
│  │  │  ╰─ ExcludeId
│  │  ├─ $MatchF
│  │  │  ╰─ Doc
│  │  │     ╰─ Expr($0 -> Eq(Bool(true)))
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": "$src" })
│  │  │  ╰─ By
│  │  │     ╰─ Name("0" -> "$src._id")
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("left" -> "$0")
│  │     │  ├─ Name("right" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $ReadF(db; smallZips)
│     ├─ $ProjectF
│     │  ├─ Name("0" -> { "$literal": true })
│     │  ├─ Name("src" -> "$$ROOT")
│     │  ╰─ ExcludeId
│     ├─ $MatchF
│     │  ╰─ Doc
│     │     ╰─ Expr($0 -> Eq(Bool(true)))
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) { return [{ "0": value.src._id }, { "left": [], "right": [value.src] }] })
│     │  ╰─ Scope(Map())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "left": [], "right": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.left = result.left.concat(value.left);
│        │                   result.right = result.right.concat(value.right)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(Map())
├─ $MatchF
│  ╰─ Doc
│     ├─ NotExpr($left -> Size(0))
│     ╰─ NotExpr($right -> Size(0))
├─ $UnwindF(DocField(BsonField.Name("right")))
├─ $UnwindF(DocField(BsonField.Name("left")))
╰─ $ProjectF
   ├─ Name("__quasar_mongodb_sigil" -> "$right.city")
   ╰─ ExcludeId