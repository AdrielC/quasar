Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $ReadF(db; zips)
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ├─ Name("f0" -> {
│  │  │  │  │       "$sum": {
│  │  │  │  │         "$cond": [
│  │  │  │  │           {
│  │  │  │  │             "$and": [
│  │  │  │  │               {
│  │  │  │  │                 "$lt": [
│  │  │  │  │                   { "$literal": null },
│  │  │  │  │                   {
│  │  │  │  │                     "$cond": [
│  │  │  │  │                       {
│  │  │  │  │                         "$and": [
│  │  │  │  │                           { "$lte": [{ "$literal": {  } }, "$$ROOT"] },
│  │  │  │  │                           { "$lt": ["$$ROOT", { "$literal": [] }] }]
│  │  │  │  │                       },
│  │  │  │  │                       "$pop",
│  │  │  │  │                       { "$literal": undefined }]
│  │  │  │  │                   }]
│  │  │  │  │               },
│  │  │  │  │               {
│  │  │  │  │                 "$lt": [
│  │  │  │  │                   {
│  │  │  │  │                     "$cond": [
│  │  │  │  │                       {
│  │  │  │  │                         "$and": [
│  │  │  │  │                           { "$lte": [{ "$literal": {  } }, "$$ROOT"] },
│  │  │  │  │                           { "$lt": ["$$ROOT", { "$literal": [] }] }]
│  │  │  │  │                       },
│  │  │  │  │                       "$pop",
│  │  │  │  │                       { "$literal": undefined }]
│  │  │  │  │                   },
│  │  │  │  │                   { "$literal": "" }]
│  │  │  │  │               }]
│  │  │  │  │           },
│  │  │  │  │           {
│  │  │  │  │             "$cond": [
│  │  │  │  │               {
│  │  │  │  │                 "$and": [
│  │  │  │  │                   { "$lte": [{ "$literal": {  } }, "$$ROOT"] },
│  │  │  │  │                   { "$lt": ["$$ROOT", { "$literal": [] }] }]
│  │  │  │  │               },
│  │  │  │  │               "$pop",
│  │  │  │  │               { "$literal": undefined }]
│  │  │  │  │           },
│  │  │  │  │           { "$literal": undefined }]
│  │  │  │  │       }
│  │  │  │  │     })
│  │  │  │  ╰─ Name("f1" -> {
│  │  │  │          "$first": {
│  │  │  │            "$cond": [
│  │  │  │              {
│  │  │  │                "$and": [
│  │  │  │                  { "$lte": [{ "$literal": {  } }, "$$ROOT"] },
│  │  │  │                  { "$lt": ["$$ROOT", { "$literal": [] }] }]
│  │  │  │              },
│  │  │  │              "$city",
│  │  │  │              { "$literal": undefined }]
│  │  │  │          }
│  │  │  │        })
│  │  │  ╰─ By
│  │  │     ╰─ Name("0" -> [
│  │  │             {
│  │  │               "$cond": [
│  │  │                 {
│  │  │                   "$and": [
│  │  │                     { "$lte": [{ "$literal": {  } }, "$$ROOT"] },
│  │  │                     { "$lt": ["$$ROOT", { "$literal": [] }] }]
│  │  │                 },
│  │  │                 "$city",
│  │  │                 { "$literal": undefined }]
│  │  │             }])
│  │  ├─ $ProjectF
│  │  │  ├─ Name("totalPop" -> "$f0")
│  │  │  ├─ Name("city" -> "$f1")
│  │  │  ╰─ ExcludeId
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│  │  │  ╰─ By
│  │  │     ├─ Name("0" -> "$identities.qsu18_0")
│  │  │     ╰─ Name("1" -> "$identities.qsu18_1")
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("left" -> "$0")
│  │     │  ├─ Name("right" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $ReadF(db; zips)
│     ├─ $ProjectF
│     │  ├─ Name("state" -> {
│     │  │       "$cond": [
│     │  │         {
│     │  │           "$and": [
│     │  │             { "$lte": [{ "$literal": {  } }, "$$ROOT"] },
│     │  │             { "$lt": ["$$ROOT", { "$literal": [] }] }]
│     │  │         },
│     │  │         "$state",
│     │  │         { "$literal": undefined }]
│     │  │     })
│     │  ╰─ ExcludeId
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) {
│     │  │               return [
│     │  │                 { "0": [value.city], "1": [value.city] },
│     │  │                 { "left": [], "right": [value] }]
│     │  │             })
│     │  ╰─ Scope(Map())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "left": [], "right": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.left = result.left.concat(value.left);
│        │                   result.right = result.right.concat(value.right)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(Map())
├─ $MatchF
│  ╰─ Doc
│     ├─ NotExpr($left -> Size(0))
│     ╰─ NotExpr($right -> Size(0))
├─ $UnwindF(DocField(BsonField.Name("right")))
├─ $UnwindF(DocField(BsonField.Name("left")))
├─ $SimpleMapF
│  ├─ Map
│  │  ╰─ Obj
│  │     ├─ Key(f0)
│  │     │  ╰─ Let(__val)
│  │     │     ├─ JsCore([_.left, _.right])
│  │     │     ╰─ SpliceObjects
│  │     │        ├─ JsCore(__val[0])
│  │     │        ╰─ JsCore(__val[1])
│  │     ╰─ Key(b0)
│  │        ╰─ Let(__val)
│  │           ├─ JsCore([_.left, _.right])
│  │           ╰─ SpliceObjects
│  │              ├─ JsCore(__val[0])
│  │              ╰─ JsCore(__val[1])
│  ╰─ Scope(Map())
├─ $GroupF
│  ├─ Grouped
│  │  ╰─ Name("f0" -> { "$first": "$f0" })
│  ╰─ By
│     ╰─ Name("0" -> "$b0")
╰─ $ProjectF
   ├─ Name("__quasar_mongodb_sigil" -> "$f0")
   ╰─ ExcludeId