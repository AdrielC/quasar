Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $ReadF(db; zips)
│  │  ├─ $ProjectF
│  │  │  ├─ Name("0" -> { "$arrayElemAt": [["$_id", "$$ROOT"], { "$literal": NumberInt("1") }] })
│  │  │  ├─ Name("1" -> { "$literal": true })
│  │  │  ├─ Name("src" -> ["$_id", "$$ROOT"])
│  │  │  ╰─ IgnoreId
│  │  ├─ $MatchF
│  │  │  ╰─ And
│  │  │     ├─ Doc
│  │  │     │  ╰─ Expr($0 -> Type(Doc))
│  │  │     ╰─ Doc
│  │  │        ╰─ Expr($1 -> Eq(Bool(true)))
│  │  ├─ $SimpleMapF
│  │  │  ├─ Map
│  │  │  │  ╰─ Obj
│  │  │  │     ├─ Key(0: _.src[1]._id)
│  │  │  │     ╰─ Key(content: _.src)
│  │  │  ╰─ Scope(Map())
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": "$content" })
│  │  │  ╰─ By
│  │  │     ╰─ Name("0" -> "$0")
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("left" -> "$0")
│  │     │  ├─ Name("right" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $ReadF(db; largeZips)
│     ├─ $ProjectF
│     │  ├─ Name("0" -> { "$arrayElemAt": [["$_id", "$$ROOT"], { "$literal": NumberInt("1") }] })
│     │  ├─ Name("1" -> { "$literal": true })
│     │  ├─ Name("src" -> ["$_id", "$$ROOT"])
│     │  ╰─ IgnoreId
│     ├─ $MatchF
│     │  ╰─ And
│     │     ├─ Doc
│     │     │  ╰─ Expr($0 -> Type(Doc))
│     │     ╰─ Doc
│     │        ╰─ Expr($1 -> Eq(Bool(true)))
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) {
│     │  │               return [
│     │  │                 { "0": value.src[1].TestProgramId },
│     │  │                 { "left": [], "right": [value.src] }]
│     │  │             })
│     │  ╰─ Scope(Map())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "left": [], "right": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.left = result.left.concat(value.left);
│        │                   result.right = result.right.concat(value.right)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(Map())
├─ $MatchF
│  ╰─ Doc
│     ├─ NotExpr($left -> Size(0))
│     ╰─ NotExpr($right -> Size(0))
├─ $UnwindF(DocField(BsonField.Name("right")))
├─ $UnwindF(DocField(BsonField.Name("left")))
├─ $SimpleMapF
│  ├─ Map
│  │  ╰─ Obj
│  │     ├─ Key(f0: (function (__val) {
│  │     │      return (isObject(__val[0][1]) && (! Array.isArray(__val[0][1]))) ? __val[0][1]._id : undefined
│  │     │    })(
│  │     │      [[_.left[0], _.left[1]], [_.right[0], _.right[1]]]))
│  │     ╰─ Key(b0: (function (__val) {
│  │            return [
│  │              (isObject(__val[0][1]) && (! Array.isArray(__val[0][1]))) ? __val[0][1]._id : undefined]
│  │          })(
│  │            [[_.left[0], _.left[1]], [_.right[0], _.right[1]]]))
│  ╰─ Scope(Map())
╰─ $GroupF
   ├─ Grouped
   │  ├─ Name("_id" -> { "$first": "$f0" })
   │  ╰─ Name("1" -> { "$sum": { "$literal": NumberInt("1") } })
   ╰─ By
      ╰─ Name("0" -> "$b0")