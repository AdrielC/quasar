Chain
├─ $ReadF(db; largeZips)
├─ $MatchF
│  ╰─ Doc
│     ╰─ Expr($TestProgramId -> Exists(true))
├─ $ProjectF
│  ├─ Name("right" -> "$$ROOT")
│  ╰─ ExcludeId
├─ $LookupF(from zips with (this).right.TestProgramId = (that)._id as left)
├─ $UnwindF(DocField(BsonField.Name("left")))
├─ $SimpleMapF
│  ├─ Map
│  │  ╰─ Obj
│  │     ├─ Key(f0: (function (__val) {
│  │     │      return (isObject(__val[0]) && (! Array.isArray(__val[0]))) ? __val[0]._id : undefined
│  │     │    })(
│  │     │      [_.left, _.right]))
│  │     ╰─ Key(b0: (function (__val) {
│  │            return [
│  │              (isObject(__val[0]) && (! Array.isArray(__val[0]))) ? __val[0]._id : undefined]
│  │          })(
│  │            [_.left, _.right]))
│  ╰─ Scope(Map())
╰─ $GroupF
   ├─ Grouped
   │  ├─ Name("_id" -> { "$first": "$f0" })
   │  ╰─ Name("1" -> { "$sum": { "$literal": NumberInt("1") } })
   ╰─ By
      ╰─ Name("0" -> "$b0")