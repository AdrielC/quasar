Chain
├─ $ReadF(db; extraSmallZips)
├─ $MatchF
│  ╰─ Doc
│     ╰─ Expr($_id -> Exists(true))
├─ $ProjectF
│  ├─ Name("left" -> "$$ROOT")
│  ╰─ ExcludeId
├─ $LookupF(from smallZips with (this).left._id = (that)._id as right)
├─ $UnwindF
│  ├─ Path(DocField(BsonField.Name("right")))
│  ├─ IncludeArrayIndex
│  ╰─ PreserveNullAndEmptyArrays
├─ $ProjectF
│  ├─ Name("0" -> {
│  │       "$cond": [
│  │         {
│  │           "$and": [
│  │             {
│  │               "$lte": [
│  │                 { "$literal": {  } },
│  │                 {
│  │                   "$arrayElemAt": [["$left", "$right"], { "$literal": NumberInt("1") }]
│  │                 }]
│  │             },
│  │             {
│  │               "$lt": [
│  │                 {
│  │                   "$arrayElemAt": [["$left", "$right"], { "$literal": NumberInt("1") }]
│  │                 },
│  │                 { "$literal": [] }]
│  │             }]
│  │         },
│  │         { "$literal": true },
│  │         { "$literal": false }]
│  │     })
│  ├─ Name("src" -> ["$left", "$right"])
│  ╰─ ExcludeId
├─ $MatchF
│  ╰─ Doc
│     ╰─ Expr($0 -> Eq(Bool(true)))
├─ $ProjectF
│  ├─ Name("left" -> "$src")
│  ├─ Name("0" -> {
│  │       "$let": {
│  │         "vars": { "el": { "$arrayElemAt": ["$src", { "$literal": NumberInt("1") }] } },
│  │         "in": "$$el._id"
│  │       }
│  │     })
│  ╰─ ExcludeId
├─ $LookupF(from zips with (this).0 = (that)._id as right)
├─ $ProjectF
│  ├─ Name("left" -> "$left")
│  ├─ Name("right" -> "$right")
│  ╰─ ExcludeId
├─ $UnwindF
│  ├─ Path(DocField(BsonField.Name("right")))
│  ├─ IncludeArrayIndex
│  ╰─ PreserveNullAndEmptyArrays
├─ $SimpleMapF
│  ├─ Map
│  │  ╰─ Obj
│  │     ├─ Key(city)
│  │     │  ╰─ If
│  │     │     ├─ BinOp(&&)
│  │     │     │  ├─ Call
│  │     │     │  │  ├─ Ident(isObject)
│  │     │     │  │  ╰─ Obj
│  │     │     │  │     ├─ Key(left: _.left[0])
│  │     │     │  │     ╰─ Key(right: _.left[1])
│  │     │     │  ╰─ UnOp(!)
│  │     │     │     ╰─ Call
│  │     │     │        ├─ JsCore(Array.isArray)
│  │     │     │        ╰─ Obj
│  │     │     │           ├─ Key(left: _.left[0])
│  │     │     │           ╰─ Key(right: _.left[1])
│  │     │     ├─ JsCore((isObject(_.left[0]) && (! Array.isArray(_.left[0]))) ? _.left[0].city : undefined)
│  │     │     ╰─ Ident(undefined)
│  │     ├─ Key(state)
│  │     │  ╰─ If
│  │     │     ├─ BinOp(&&)
│  │     │     │  ├─ Call
│  │     │     │  │  ├─ Ident(isObject)
│  │     │     │  │  ╰─ Obj
│  │     │     │  │     ├─ Key(left: _.left[0])
│  │     │     │  │     ╰─ Key(right: _.left[1])
│  │     │     │  ╰─ UnOp(!)
│  │     │     │     ╰─ Call
│  │     │     │        ├─ JsCore(Array.isArray)
│  │     │     │        ╰─ Obj
│  │     │     │           ├─ Key(left: _.left[0])
│  │     │     │           ╰─ Key(right: _.left[1])
│  │     │     ├─ JsCore((isObject(_.left[1]) && (! Array.isArray(_.left[1]))) ? _.left[1].state : undefined)
│  │     │     ╰─ Ident(undefined)
│  │     ╰─ Key(pop: _.right.pop)
│  ╰─ Scope(Map())
╰─ $ProjectF
   ├─ Name("city" -> true)
   ├─ Name("state" -> true)
   ├─ Name("pop" -> true)
   ╰─ ExcludeId