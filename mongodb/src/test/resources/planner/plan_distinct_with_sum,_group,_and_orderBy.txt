Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $ReadF(db; zips)
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("f0" -> {
│  │  │  │          "$sum": {
│  │  │  │            "$cond": [
│  │  │  │              {
│  │  │  │                "$and": [
│  │  │  │                  { "$lt": [{ "$literal": null }, "$pop"] },
│  │  │  │                  { "$lt": ["$pop", { "$literal": "" }] }]
│  │  │  │              },
│  │  │  │              "$pop",
│  │  │  │              { "$literal": undefined }]
│  │  │  │          }
│  │  │  │        })
│  │  │  ╰─ By
│  │  │     ╰─ Name("0" -> "$city")
│  │  ├─ $ProjectF
│  │  │  ├─ Name("f0" -> true)
│  │  │  ├─ Name("f1" -> "$_id.0")
│  │  │  ╰─ IgnoreId
│  │  ├─ $ProjectF
│  │  │  ├─ Name("identities" -> { "qsu31_0": "$_id.0" })
│  │  │  ├─ Name("value" -> { "totalPop": "$f0", "city": "$f1" })
│  │  │  ╰─ ExcludeId
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│  │  │  ╰─ By
│  │  │     ╰─ Name("0" -> "$identities.qsu31_0")
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("left" -> "$0")
│  │     │  ├─ Name("right" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $ReadF(db; zips)
│     ├─ $ProjectF
│     │  ├─ Name("state" -> "$state")
│     │  ╰─ ExcludeId
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) { return [{ "0": value.city }, { "left": [], "right": [value] }] })
│     │  ╰─ Scope(Map())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "left": [], "right": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.left = result.left.concat(value.left);
│        │                   result.right = result.right.concat(value.right)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(Map())
├─ $MatchF
│  ╰─ Doc
│     ├─ NotExpr($left -> Size(0))
│     ╰─ NotExpr($right -> Size(0))
├─ $UnwindF(DocField(BsonField.Name("right")))
├─ $UnwindF(DocField(BsonField.Name("left")))
├─ $ProjectF
│  ├─ Name("left" -> "$left")
│  ├─ Name("right" -> "$right")
│  ╰─ ExcludeId
├─ $SimpleMapF
│  ├─ Map
│  │  ╰─ Obj
│  │     ├─ Key(f0)
│  │     │  ╰─ Obj
│  │     │     ├─ Key(identities: _.left.identities)
│  │     │     ╰─ Key(value)
│  │     │        ╰─ SpliceObjects
│  │     │           ├─ JsCore(_.left.value)
│  │     │           ╰─ JsCore(_.right)
│  │     ╰─ Key(b0)
│  │        ╰─ Obj
│  │           ├─ Key(identities: _.left.identities)
│  │           ╰─ Key(value)
│  │              ╰─ SpliceObjects
│  │                 ├─ JsCore(_.left.value)
│  │                 ╰─ JsCore(_.right)
│  ╰─ Scope(Map())
├─ $GroupF
│  ├─ Grouped
│  │  ╰─ Name("f0" -> { "$first": "$f0" })
│  ╰─ By
│     ╰─ Name("0" -> "$b0")
├─ $SortF
│  ╰─ SortKey(f0.value.totalPop -> Descending)
╰─ $ProjectF
   ├─ Name("__quasar_mongodb_sigil" -> "$f0.value")
   ╰─ ExcludeId