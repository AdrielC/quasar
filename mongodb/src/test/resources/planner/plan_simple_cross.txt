Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $ReadF(db; zips)
│  │  ├─ $MatchF
│  │  │  ╰─ Or
│  │  │     ├─ Doc
│  │  │     │  ╰─ Expr($pop -> Type(Int32))
│  │  │     ├─ Doc
│  │  │     │  ╰─ Expr($pop -> Type(Int64))
│  │  │     ├─ Doc
│  │  │     │  ╰─ Expr($pop -> Type(Dec))
│  │  │     ├─ Doc
│  │  │     │  ╰─ Expr($pop -> Type(Text))
│  │  │     ├─ Doc
│  │  │     │  ╰─ Expr($pop -> Type(Date))
│  │  │     ╰─ Doc
│  │  │        ╰─ Expr($pop -> Type(Bool))
│  │  ├─ $ProjectF
│  │  │  ├─ Name("0" -> {
│  │  │  │       "$cond": [
│  │  │  │         {
│  │  │  │           "$or": [
│  │  │  │             {
│  │  │  │               "$and": [
│  │  │  │                 { "$lt": [{ "$literal": null }, "$pop"] },
│  │  │  │                 { "$lt": ["$pop", { "$literal": {  } }] }]
│  │  │  │             },
│  │  │  │             {
│  │  │  │               "$and": [
│  │  │  │                 { "$lte": [{ "$literal": false }, "$pop"] },
│  │  │  │                 { "$lt": ["$pop", { "$literal": new RegExp("", "") }] }]
│  │  │  │             }]
│  │  │  │         },
│  │  │  │         { "$literal": true },
│  │  │  │         { "$literal": false }]
│  │  │  │     })
│  │  │  ├─ Name("src" -> "$$ROOT")
│  │  │  ╰─ ExcludeId
│  │  ├─ $MatchF
│  │  │  ╰─ Doc
│  │  │     ╰─ Expr($0 -> Eq(Bool(true)))
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": "$src" })
│  │  │  ╰─ By({ "$literal": null })
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("left" -> "$0")
│  │     │  ├─ Name("right" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $ReadF(db; zips2)
│     ├─ $MatchF
│     │  ╰─ Or
│     │     ├─ Doc
│     │     │  ╰─ Expr($pop -> Type(Int32))
│     │     ├─ Doc
│     │     │  ╰─ Expr($pop -> Type(Int64))
│     │     ├─ Doc
│     │     │  ╰─ Expr($pop -> Type(Dec))
│     │     ├─ Doc
│     │     │  ╰─ Expr($pop -> Type(Text))
│     │     ├─ Doc
│     │     │  ╰─ Expr($pop -> Type(Date))
│     │     ╰─ Doc
│     │        ╰─ Expr($pop -> Type(Bool))
│     ├─ $ProjectF
│     │  ├─ Name("0" -> {
│     │  │       "$cond": [
│     │  │         {
│     │  │           "$or": [
│     │  │             {
│     │  │               "$and": [
│     │  │                 { "$lt": [{ "$literal": null }, "$pop"] },
│     │  │                 { "$lt": ["$pop", { "$literal": {  } }] }]
│     │  │             },
│     │  │             {
│     │  │               "$and": [
│     │  │                 { "$lte": [{ "$literal": false }, "$pop"] },
│     │  │                 { "$lt": ["$pop", { "$literal": new RegExp("", "") }] }]
│     │  │             }]
│     │  │         },
│     │  │         { "$literal": true },
│     │  │         { "$literal": false }]
│     │  │     })
│     │  ├─ Name("src" -> "$$ROOT")
│     │  ╰─ ExcludeId
│     ├─ $MatchF
│     │  ╰─ Doc
│     │     ╰─ Expr($0 -> Eq(Bool(true)))
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) { return [null, { "left": [], "right": [value.src] }] })
│     │  ╰─ Scope(Map())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "left": [], "right": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.left = result.left.concat(value.left);
│        │                   result.right = result.right.concat(value.right)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(Map())
├─ $MatchF
│  ╰─ Doc
│     ├─ NotExpr($left -> Size(0))
│     ╰─ NotExpr($right -> Size(0))
├─ $UnwindF(DocField(BsonField.Name("right")))
├─ $UnwindF(DocField(BsonField.Name("left")))
├─ $ProjectF
│  ├─ Name("0" -> ["$left", "$right"])
│  ╰─ ExcludeId
├─ $SimpleMapF
│  ├─ Map
│  │  ╰─ Obj
│  │     ├─ Key(0: true)
│  │     ├─ Key(1: _["0"][0].pop < _["0"][1].pop)
│  │     ╰─ Key(src: _["0"])
│  ╰─ Scope(Map())
├─ $MatchF
│  ╰─ And
│     ├─ Doc
│     │  ╰─ Expr($0 -> Eq(Bool(true)))
│     ╰─ Doc
│        ╰─ Expr($1 -> Eq(Bool(true)))
╰─ $SimpleMapF
   ├─ Map
   │  ╰─ Obj
   │     ╰─ Key(__quasar_mongodb_sigil: (isObject(_.src[1]) && (! Array.isArray(_.src[1]))) ? _.src[1].city : undefined)
   ╰─ Scope(Map())