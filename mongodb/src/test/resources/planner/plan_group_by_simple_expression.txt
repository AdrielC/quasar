Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $ReadF(db; extraSmallZips)
│  │  ├─ $ProjectF
│  │  │  ├─ Name("city" -> {
│  │  │  │       "$cond": [
│  │  │  │         {
│  │  │  │           "$and": [
│  │  │  │             { "$lte": [{ "$literal": {  } }, "$$ROOT"] },
│  │  │  │             { "$lt": ["$$ROOT", { "$literal": [] }] }]
│  │  │  │         },
│  │  │  │         "$city",
│  │  │  │         { "$literal": undefined }]
│  │  │  │     })
│  │  │  ╰─ ExcludeId
│  │  ├─ $MatchF
│  │  │  ╰─ Doc
│  │  │     ╰─ Expr($city -> Type(Text))
│  │  ├─ $ProjectF
│  │  │  ├─ Name("0" -> {
│  │  │  │       "$cond": [
│  │  │  │         {
│  │  │  │           "$and": [
│  │  │  │             { "$lte": [{ "$literal": "" }, "$city"] },
│  │  │  │             { "$lt": ["$city", { "$literal": {  } }] }]
│  │  │  │         },
│  │  │  │         { "$literal": true },
│  │  │  │         { "$literal": false }]
│  │  │  │     })
│  │  │  ├─ Name("src" -> "$$ROOT")
│  │  │  ╰─ ExcludeId
│  │  ├─ $MatchF
│  │  │  ╰─ Doc
│  │  │     ╰─ Expr($0 -> Eq(Bool(true)))
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": "$src" })
│  │  │  ╰─ By
│  │  │     ╰─ Name("0" -> { "$toLower": "$src.city" })
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("left" -> "$0")
│  │     │  ├─ Name("right" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $ReadF(db; extraSmallZips)
│     ├─ $GroupF
│     │  ├─ Grouped
│     │  │  ╰─ Name("f0" -> {
│     │  │          "$sum": {
│     │  │            "$cond": [
│     │  │              {
│     │  │                "$and": [
│     │  │                  {
│     │  │                    "$lt": [
│     │  │                      { "$literal": null },
│     │  │                      {
│     │  │                        "$cond": [
│     │  │                          {
│     │  │                            "$and": [
│     │  │                              { "$lte": [{ "$literal": {  } }, "$$ROOT"] },
│     │  │                              { "$lt": ["$$ROOT", { "$literal": [] }] }]
│     │  │                          },
│     │  │                          "$pop",
│     │  │                          { "$literal": undefined }]
│     │  │                      }]
│     │  │                  },
│     │  │                  {
│     │  │                    "$lt": [
│     │  │                      {
│     │  │                        "$cond": [
│     │  │                          {
│     │  │                            "$and": [
│     │  │                              { "$lte": [{ "$literal": {  } }, "$$ROOT"] },
│     │  │                              { "$lt": ["$$ROOT", { "$literal": [] }] }]
│     │  │                          },
│     │  │                          "$pop",
│     │  │                          { "$literal": undefined }]
│     │  │                      },
│     │  │                      { "$literal": "" }]
│     │  │                  }]
│     │  │              },
│     │  │              {
│     │  │                "$cond": [
│     │  │                  {
│     │  │                    "$and": [
│     │  │                      { "$lte": [{ "$literal": {  } }, "$$ROOT"] },
│     │  │                      { "$lt": ["$$ROOT", { "$literal": [] }] }]
│     │  │                  },
│     │  │                  "$pop",
│     │  │                  { "$literal": undefined }]
│     │  │              },
│     │  │              { "$literal": undefined }]
│     │  │          }
│     │  │        })
│     │  ╰─ By
│     │     ╰─ Name("0" -> {
│     │             "$cond": [
│     │               {
│     │                 "$and": [
│     │                   {
│     │                     "$lte": [
│     │                       { "$literal": "" },
│     │                       {
│     │                         "$cond": [
│     │                           {
│     │                             "$and": [
│     │                               { "$lte": [{ "$literal": {  } }, "$$ROOT"] },
│     │                               { "$lt": ["$$ROOT", { "$literal": [] }] }]
│     │                           },
│     │                           "$city",
│     │                           { "$literal": undefined }]
│     │                       }]
│     │                   },
│     │                   {
│     │                     "$lt": [
│     │                       {
│     │                         "$cond": [
│     │                           {
│     │                             "$and": [
│     │                               { "$lte": [{ "$literal": {  } }, "$$ROOT"] },
│     │                               { "$lt": ["$$ROOT", { "$literal": [] }] }]
│     │                           },
│     │                           "$city",
│     │                           { "$literal": undefined }]
│     │                       },
│     │                       { "$literal": {  } }]
│     │                   }]
│     │               },
│     │               {
│     │                 "$cond": [
│     │                   {
│     │                     "$and": [
│     │                       { "$lte": [{ "$literal": {  } }, "$$ROOT"] },
│     │                       { "$lt": ["$$ROOT", { "$literal": [] }] }]
│     │                   },
│     │                   { "$toLower": "$city" },
│     │                   { "$literal": undefined }]
│     │               },
│     │               { "$literal": undefined }]
│     │           })
│     ├─ $ProjectF
│     │  ├─ Name("identities" -> { "qsu17_0": "$_id.0" })
│     │  ├─ Name("value" -> { "1": "$f0" })
│     │  ╰─ ExcludeId
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) {
│     │  │               return [{ "0": value.identities.qsu17_0 }, { "left": [], "right": [value] }]
│     │  │             })
│     │  ╰─ Scope(Map())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "left": [], "right": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.left = result.left.concat(value.left);
│        │                   result.right = result.right.concat(value.right)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(Map())
├─ $MatchF
│  ╰─ Doc
│     ├─ NotExpr($left -> Size(0))
│     ╰─ NotExpr($right -> Size(0))
├─ $UnwindF(DocField(BsonField.Name("right")))
├─ $UnwindF(DocField(BsonField.Name("left")))
╰─ $SimpleMapF
   ├─ Map
   │  ╰─ Obj
   │     ╰─ Key(__quasar_mongodb_sigil)
   │        ╰─ SpliceObjects
   │           ├─ JsCore(_.left)
   │           ╰─ JsCore(_.right.value)
   ╰─ Scope(Map())