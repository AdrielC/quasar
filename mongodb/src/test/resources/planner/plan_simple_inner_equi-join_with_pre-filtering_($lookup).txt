Chain
├─ $ReadF(db; smallZips)
├─ $MatchF
│  ╰─ And
│     ├─ Or
│     │  ├─ Doc
│     │  │  ╰─ Expr($pop -> Type(Int32))
│     │  ├─ Doc
│     │  │  ╰─ Expr($pop -> Type(Int64))
│     │  ├─ Doc
│     │  │  ╰─ Expr($pop -> Type(Dec))
│     │  ├─ Doc
│     │  │  ╰─ Expr($pop -> Type(Text))
│     │  ├─ Doc
│     │  │  ╰─ Expr($pop -> Type(Date))
│     │  ╰─ Doc
│     │     ╰─ Expr($pop -> Type(Bool))
│     ╰─ Doc
│        ╰─ Expr($pop -> Gte(Int32(10000)))
├─ $ProjectF
│  ├─ Name("right" -> "$$ROOT")
│  ├─ Name("0" -> {
│  │       "$cond": [
│  │         {
│  │           "$and": [
│  │             { "$lte": [{ "$literal": {  } }, "$$ROOT"] },
│  │             { "$lt": ["$$ROOT", { "$literal": [] }] }]
│  │         },
│  │         "$_id",
│  │         { "$literal": undefined }]
│  │     })
│  ╰─ ExcludeId
├─ $LookupF(from zips with (this).0 = (that)._id as left)
├─ $ProjectF
│  ├─ Name("right" -> "$right")
│  ├─ Name("left" -> "$left")
│  ╰─ ExcludeId
├─ $UnwindF(DocField(BsonField.Name("left")))
╰─ $ProjectF
   ├─ Name("city" -> "$left.city")
   ├─ Name("state" -> "$right.state")
   ╰─ ExcludeId