Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $ReadF(db; baz)
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│  │  │  ╰─ By
│  │  │     ╰─ Name("0" -> {
│  │  │             "$cond": [
│  │  │               {
│  │  │                 "$and": [
│  │  │                   { "$lte": [{ "$literal": {  } }, "$$ROOT"] },
│  │  │                   { "$lt": ["$$ROOT", { "$literal": [] }] }]
│  │  │               },
│  │  │               "$bar_id",
│  │  │               { "$literal": undefined }]
│  │  │           })
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("right" -> "$0")
│  │     │  ├─ Name("left" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $FoldLeftF
│     │  ├─ Chain
│     │  │  ├─ $ReadF(db; foo)
│     │  │  ├─ $GroupF
│     │  │  │  ├─ Grouped
│     │  │  │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│     │  │  │  ╰─ By
│     │  │  │     ╰─ Name("0" -> {
│     │  │  │             "$cond": [
│     │  │  │               {
│     │  │  │                 "$and": [
│     │  │  │                   { "$lte": [{ "$literal": {  } }, "$$ROOT"] },
│     │  │  │                   { "$lt": ["$$ROOT", { "$literal": [] }] }]
│     │  │  │               },
│     │  │  │               "$id",
│     │  │  │               { "$literal": undefined }]
│     │  │  │           })
│     │  │  ╰─ $ProjectF
│     │  │     ├─ Name("_id" -> "$_id")
│     │  │     ├─ Name("value")
│     │  │     │  ├─ Name("left" -> "$0")
│     │  │     │  ├─ Name("right" -> { "$literal": [] })
│     │  │     │  ╰─ Name("_id" -> "$_id")
│     │  │     ╰─ IncludeId
│     │  ╰─ Chain
│     │     ├─ $ReadF(db; bar)
│     │     ├─ $MapF
│     │     │  ├─ JavaScript(function (key, value) {
│     │     │  │               return [
│     │     │  │                 {
│     │     │  │                   "0": (isObject(value) && (! Array.isArray(value))) ? value.foo_id : undefined
│     │     │  │                 },
│     │     │  │                 { "left": [], "right": [value] }]
│     │     │  │             })
│     │     │  ╰─ Scope(Map())
│     │     ╰─ $ReduceF
│     │        ├─ JavaScript(function (key, values) {
│     │        │               var result = { "left": [], "right": [] };
│     │        │               values.forEach(
│     │        │                 function (value) {
│     │        │                   result.left = result.left.concat(value.left);
│     │        │                   result.right = result.right.concat(value.right)
│     │        │                 });
│     │        │               return result
│     │        │             })
│     │        ╰─ Scope(Map())
│     ├─ $MatchF
│     │  ╰─ Doc
│     │     ├─ NotExpr($left -> Size(0))
│     │     ╰─ NotExpr($right -> Size(0))
│     ├─ $UnwindF(DocField(BsonField.Name("right")))
│     ├─ $UnwindF(DocField(BsonField.Name("left")))
│     ├─ $SimpleMapF
│     │  ├─ Map
│     │  │  ╰─ Let(__val)
│     │  │     ├─ JsCore([
│     │  │     │         (isObject(_.left) && (! Array.isArray(_.left))) ? _.left : undefined,
│     │  │     │         (isObject(_.right) && (! Array.isArray(_.right))) ? _.right : undefined])
│     │  │     ╰─ Obj
│     │  │        ├─ Key(0: (isObject(__val[1]) && (! Array.isArray(__val[1]))) ? true : false)
│     │  │        ╰─ Key(src: __val)
│     │  ╰─ Scope(Map())
│     ├─ $MatchF
│     │  ╰─ Doc
│     │     ╰─ Expr($0 -> Eq(Bool(true)))
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) { return [{ "0": value.src[1].id }, { "right": [], "left": [value.src] }] })
│     │  ╰─ Scope(Map())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "right": [], "left": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.right = result.right.concat(value.right);
│        │                   result.left = result.left.concat(value.left)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(Map())
├─ $MatchF
│  ╰─ Doc
│     ╰─ NotExpr($left -> Size(0))
├─ $ProjectF
│  ├─ Name("right" -> {
│  │       "$cond": [
│  │         { "$eq": [{ "$size": "$right" }, { "$literal": NumberInt("0") }] },
│  │         { "$literal": [{  }] },
│  │         "$right"]
│  │     })
│  ├─ Name("left" -> "$left")
│  ╰─ ExcludeId
├─ $UnwindF(DocField(BsonField.Name("left")))
├─ $UnwindF(DocField(BsonField.Name("right")))
├─ $SimpleMapF
│  ├─ Map
│  │  ╰─ Obj
│  │     ├─ Key(name)
│  │     │  ╰─ If
│  │     │     ├─ BinOp(&&)
│  │     │     │  ├─ Call
│  │     │     │  │  ├─ Ident(isObject)
│  │     │     │  │  ╰─ Obj
│  │     │     │  │     ├─ Key(left: _.left[0])
│  │     │     │  │     ╰─ Key(right: _.left[1])
│  │     │     │  ╰─ UnOp(!)
│  │     │     │     ╰─ Call
│  │     │     │        ├─ JsCore(Array.isArray)
│  │     │     │        ╰─ Obj
│  │     │     │           ├─ Key(left: _.left[0])
│  │     │     │           ╰─ Key(right: _.left[1])
│  │     │     ├─ JsCore((isObject(_.left[0]) && (! Array.isArray(_.left[0]))) ? _.left[0].name : undefined)
│  │     │     ╰─ Ident(undefined)
│  │     ├─ Key(address)
│  │     │  ╰─ If
│  │     │     ├─ BinOp(&&)
│  │     │     │  ├─ Call
│  │     │     │  │  ├─ Ident(isObject)
│  │     │     │  │  ╰─ Obj
│  │     │     │  │     ├─ Key(left: _.left[0])
│  │     │     │  │     ╰─ Key(right: _.left[1])
│  │     │     │  ╰─ UnOp(!)
│  │     │     │     ╰─ Call
│  │     │     │        ├─ JsCore(Array.isArray)
│  │     │     │        ╰─ Obj
│  │     │     │           ├─ Key(left: _.left[0])
│  │     │     │           ╰─ Key(right: _.left[1])
│  │     │     ├─ JsCore((isObject(_.left[1]) && (! Array.isArray(_.left[1]))) ? _.left[1].address : undefined)
│  │     │     ╰─ Ident(undefined)
│  │     ╰─ Key(zip: ((isObject(
│  │            (isObject(_.right) && (! Array.isArray(_.right))) ? _.right : undefined) && (! Array.isArray(
│  │            (isObject(_.right) && (! Array.isArray(_.right))) ? _.right : undefined))) && (isObject(_.right) && (! Array.isArray(_.right)))) ? _.right.zip : undefined)
│  ╰─ Scope(Map())
╰─ $ProjectF
   ├─ Name("name" -> true)
   ├─ Name("address" -> true)
   ├─ Name("zip" -> true)
   ╰─ ExcludeId