Chain
├─ $FoldLeftF
│  ├─ Chain
│  │  ├─ $ReadF(db; baz)
│  │  ├─ $GroupF
│  │  │  ├─ Grouped
│  │  │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│  │  │  ╰─ By
│  │  │     ╰─ Name("0" -> "$bar_id")
│  │  ╰─ $ProjectF
│  │     ├─ Name("_id" -> "$_id")
│  │     ├─ Name("value")
│  │     │  ├─ Name("right" -> "$0")
│  │     │  ├─ Name("left" -> { "$literal": [] })
│  │     │  ╰─ Name("_id" -> "$_id")
│  │     ╰─ IncludeId
│  ╰─ Chain
│     ├─ $FoldLeftF
│     │  ├─ Chain
│     │  │  ├─ $ReadF(db; foo)
│     │  │  ├─ $GroupF
│     │  │  │  ├─ Grouped
│     │  │  │  │  ╰─ Name("0" -> { "$push": "$$ROOT" })
│     │  │  │  ╰─ By
│     │  │  │     ╰─ Name("0" -> "$id")
│     │  │  ╰─ $ProjectF
│     │  │     ├─ Name("_id" -> "$_id")
│     │  │     ├─ Name("value")
│     │  │     │  ├─ Name("left" -> "$0")
│     │  │     │  ├─ Name("right" -> { "$literal": [] })
│     │  │     │  ╰─ Name("_id" -> "$_id")
│     │  │     ╰─ IncludeId
│     │  ╰─ Chain
│     │     ├─ $ReadF(db; bar)
│     │     ├─ $MapF
│     │     │  ├─ JavaScript(function (key, value) { return [{ "0": value.foo_id }, { "left": [], "right": [value] }] })
│     │     │  ╰─ Scope(Map())
│     │     ╰─ $ReduceF
│     │        ├─ JavaScript(function (key, values) {
│     │        │               var result = { "left": [], "right": [] };
│     │        │               values.forEach(
│     │        │                 function (value) {
│     │        │                   result.left = result.left.concat(value.left);
│     │        │                   result.right = result.right.concat(value.right)
│     │        │                 });
│     │        │               return result
│     │        │             })
│     │        ╰─ Scope(Map())
│     ├─ $MatchF
│     │  ╰─ Doc
│     │     ├─ NotExpr($left -> Size(0))
│     │     ╰─ NotExpr($right -> Size(0))
│     ├─ $UnwindF(DocField(BsonField.Name("right")))
│     ├─ $UnwindF(DocField(BsonField.Name("left")))
│     ├─ $MatchF
│     │  ╰─ Doc
│     │     ╰─ Expr($right -> Type(Doc))
│     ├─ $ProjectF
│     │  ├─ Name("0" -> {
│     │  │       "$cond": [
│     │  │         {
│     │  │           "$and": [
│     │  │             { "$lte": [{ "$literal": {  } }, "$right"] },
│     │  │             { "$lt": ["$right", { "$literal": [] }] }]
│     │  │         },
│     │  │         { "$literal": true },
│     │  │         { "$literal": false }]
│     │  │     })
│     │  ├─ Name("src")
│     │  │  ├─ Name("left" -> "$left")
│     │  │  ╰─ Name("right" -> "$right")
│     │  ╰─ ExcludeId
│     ├─ $MatchF
│     │  ╰─ Doc
│     │     ╰─ Expr($0 -> Eq(Bool(true)))
│     ├─ $MapF
│     │  ├─ JavaScript(function (key, value) {
│     │  │               return [{ "0": value.src.right.id }, { "right": [], "left": [value.src] }]
│     │  │             })
│     │  ╰─ Scope(Map())
│     ╰─ $ReduceF
│        ├─ JavaScript(function (key, values) {
│        │               var result = { "right": [], "left": [] };
│        │               values.forEach(
│        │                 function (value) {
│        │                   result.right = result.right.concat(value.right);
│        │                   result.left = result.left.concat(value.left)
│        │                 });
│        │               return result
│        │             })
│        ╰─ Scope(Map())
├─ $MatchF
│  ╰─ Doc
│     ╰─ NotExpr($left -> Size(0))
├─ $ProjectF
│  ├─ Name("right" -> {
│  │       "$cond": [
│  │         { "$eq": [{ "$size": "$right" }, { "$literal": NumberInt("0") }] },
│  │         { "$literal": [{  }] },
│  │         "$right"]
│  │     })
│  ├─ Name("left" -> "$left")
│  ╰─ ExcludeId
├─ $UnwindF(DocField(BsonField.Name("left")))
├─ $UnwindF(DocField(BsonField.Name("right")))
├─ $SimpleMapF
│  ├─ Map
│  │  ╰─ Obj
│  │     ├─ Key(name)
│  │     │  ╰─ If
│  │     │     ├─ BinOp(&&)
│  │     │     │  ├─ Call
│  │     │     │  │  ├─ Ident(isObject)
│  │     │     │  │  ╰─ Obj
│  │     │     │  │     ├─ Key(left: _.left.left)
│  │     │     │  │     ╰─ Key(right: _.left.right)
│  │     │     │  ╰─ UnOp(!)
│  │     │     │     ╰─ Call
│  │     │     │        ├─ JsCore(Array.isArray)
│  │     │     │        ╰─ Obj
│  │     │     │           ├─ Key(left: _.left.left)
│  │     │     │           ╰─ Key(right: _.left.right)
│  │     │     ├─ JsCore((isObject(_.left.left) && (! Array.isArray(_.left.left))) ? _.left.left.name : undefined)
│  │     │     ╰─ Ident(undefined)
│  │     ├─ Key(address)
│  │     │  ╰─ If
│  │     │     ├─ BinOp(&&)
│  │     │     │  ├─ Call
│  │     │     │  │  ├─ Ident(isObject)
│  │     │     │  │  ╰─ Obj
│  │     │     │  │     ├─ Key(left: _.left.left)
│  │     │     │  │     ╰─ Key(right: _.left.right)
│  │     │     │  ╰─ UnOp(!)
│  │     │     │     ╰─ Call
│  │     │     │        ├─ JsCore(Array.isArray)
│  │     │     │        ╰─ Obj
│  │     │     │           ├─ Key(left: _.left.left)
│  │     │     │           ╰─ Key(right: _.left.right)
│  │     │     ├─ JsCore((isObject(_.left.right) && (! Array.isArray(_.left.right))) ? _.left.right.address : undefined)
│  │     │     ╰─ Ident(undefined)
│  │     ╰─ Key(zip: _.right.zip)
│  ╰─ Scope(Map())
╰─ $ProjectF
   ├─ Name("name" -> true)
   ├─ Name("address" -> true)
   ├─ Name("zip" -> true)
   ╰─ ExcludeId